# Docs:
# https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
    - master
    
variables:
  terraformVersion: 0.12.19
  agentPool: 'ubuntu-18.04'
  action:

stages:
  - stage: GetArtifacts
    jobs:
      - job: Validate
        pool:
          vmImage: ${{ variables.agentPool }}
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: ${{ variables.terraformVersion }}
          - task: PowerShell@2
            displayName: Run tests
            inputs:
              targetType: 'inline'
              script: |
                Install-Module -Name Pester -Force -Verbose -Scope CurrentUser
                Invoke-Pester ./ci -OutputFormat NUnitXml -OutputFile ./TEST-CI.xml -EnableExit
              pwsh: true
          - task: PublishTestResults@2
            displayName: 'Publish Test Results **/TEST-*.xml'
            inputs:
              testResultsFormat: NUnit
              failTaskOnFailedTests: true
            condition: always()

      - template: pipeline-templates/terraform-plan.yaml
        parameters:
          environment: 'sbox'
          component: 'global'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}

      - template: pipeline-templates/terraform-plan.yaml
        parameters:
          environment: 'sbox'
          component: 'cftapps_cluster_lb'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}

      - template: pipeline-templates/terraform-plan.yaml
        parameters:
          environment: 'sbox'
          component: 'shutter'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}

      - template: pipeline-templates/terraform-plan.yaml
        parameters:
          environment: 'ithc'
          component: 'global'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}

      - template: pipeline-templates/terraform-plan.yaml
        parameters:
          environment: 'ithc'
          component: 'cftapps_cluster_lb'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}

      - template: pipeline-templates/terraform-plan.yaml
        parameters:
          environment: 'test'
          component: 'global'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}

      - template: pipeline-templates/terraform-plan.yaml
        parameters:
          environment: 'test'
          component: 'cftapps_cluster_lb'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}

      - template: pipeline-templates/terraform-plan.yaml
        parameters:
          environment: 'stg'
          component: 'global'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}

      - template: pipeline-templates/terraform-plan.yaml
        parameters:
          environment: 'stg'
          component: 'cftapps_cluster_lb'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}

      - template: pipeline-templates/terraform-plan.yaml
        parameters:
         environment: 'prod'
         component: 'global'
         build: $(Build.BuildNumber)
         agentPool: ${{ variables.agentPool }}
         terraformVersion: ${{ variables.terraformVersion }}

      - template: pipeline-templates/terraform-plan.yaml
        parameters:
          environment: 'prod'
          component: 'cftapps_cluster_lb'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}

      - template: pipeline-templates/terraform-plan.yaml
        parameters:
          environment: 'prod'
          component: 'shutter'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}

      - job: Archive
        pool:
          vmImage: ${{ variables.agentPool }}
        steps:
          - task: CopyFiles@2
            displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
            inputs:
              TargetFolder: '$(Build.ArtifactStagingDirectory)'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact: drop'

  - stage: ApplyGlobalSandbox
    dependsOn: GetArtifacts
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - template: pipeline-templates/terraform-apply.yaml
        parameters:
          environment: 'sbox'
          component: 'global'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}

  - stage: ApplyCftAppsLBSandbox
    displayName: "Apply CFT APPs LB - Sandbox"
    dependsOn: GetArtifacts
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - template: pipeline-templates/terraform-apply.yaml
        parameters:
          environment: 'sbox'
          component: 'cftapps_cluster_lb'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}

  - stage: ApplyShutterSandbox
    dependsOn: GetArtifacts
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - template: pipeline-templates/terraform-apply.yaml
        parameters:
          environment: 'sbox'
          component: 'shutter'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}

  - stage: ApplyGlobalITHC
    dependsOn: ApplyGlobalSandbox
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - template: pipeline-templates/terraform-apply.yaml
        parameters:
          environment: 'ithc'
          component: 'global'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}

  - stage: ApplyCftAppsLBITHC
    displayName: "Apply CFT APPs LB - ITHC"
    dependsOn: ApplyCftAppsLBSandbox
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - template: pipeline-templates/terraform-apply.yaml
        parameters:
          environment: 'ithc'
          component: 'cftapps_cluster_lb'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}

  - stage: ApplyGlobalPerfTest
    dependsOn: ApplyGlobalSandbox
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - template: pipeline-templates/terraform-apply.yaml
        parameters:
          environment: 'test'
          component: 'global'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}

  - stage: ApplyCftAppsLBTest
    displayName: "Apply CFT APPs LB - Test"
    dependsOn: ApplyCftAppsLBSandbox
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - template: pipeline-templates/terraform-apply.yaml
        parameters:
          environment: 'test'
          component: 'cftapps_cluster_lb'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}

  - stage: ApplyGlobalAAT
    dependsOn: ApplyGlobalSandbox
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - template: pipeline-templates/terraform-apply.yaml
        parameters:
          environment: 'stg'
          component: 'global'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}

  - stage: ApplyCftAppsLBStg
    displayName: "Apply CFT APPs LB - Staging"
    dependsOn: ApplyCftAppsLBSandbox
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - template: pipeline-templates/terraform-apply.yaml
        parameters:
          environment: 'stg'
          component: 'cftapps_cluster_lb'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}

  - stage: ApplyGlobalProd
    dependsOn: ApplyGlobalSandbox
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
     - template: pipeline-templates/terraform-apply.yaml
       parameters:
         environment: 'prod'
         component: 'global'
         build: $(Build.BuildNumber)
         agentPool: ${{ variables.agentPool }}
         terraformVersion: ${{ variables.terraformVersion }}

  - stage: ApplyCftAppsLBProd
    displayName: "Apply CFT APPs LB - Prod"
    dependsOn: ApplyCftAppsLBSandbox
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - template: pipeline-templates/terraform-apply.yaml
        parameters:
          environment: 'prod'
          component: 'cftapps_cluster_lb'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}

  - stage: ApplyShutterProd
    dependsOn: ApplyShutterSandbox
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - template: pipeline-templates/terraform-apply.yaml
        parameters:
          environment: 'prod'
          component: 'shutter'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}
