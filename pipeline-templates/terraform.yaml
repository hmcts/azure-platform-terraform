  jobs:
    - job: TerraformPlanAndApply
      pool: ${{ parameters.pool }}
      timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
      steps:
      - task: TerraformInstaller@0
        displayName: Terraform install
        inputs:
          terraformVersion: ${{ parameters.terraformVersion }}

      - task: AzureCLI@2
        displayName: AzureServicePrincipalAuth
        inputs:
          azureSubscription: '${{ parameters.service_connection }}'
          scriptType: bash
          scriptLocation: inlineScript
          addSpnToEnvironment: true
          inlineScript: |
            #!/bin/bash
            set -e
            echo "##vso[task.setvariable variable=ServicePrincipalId;]$servicePrincipalId"
            echo "##vso[task.setvariable variable=ServicePrincipalKey;]$servicePrincipalKey"
            echo "##vso[task.setvariable variable=TenantId;]$tenantId"

      - task: TerraformCLI@0
        displayName: Init - ${{ parameters.environment }} - ${{ parameters.component }}
        inputs:
          command: 'init'
          backendType: 'azurerm'
          backendServiceArm: '${{ parameters.service_connection }}'
          backendAzureRmResourceGroupName: '${{ parameters.storage_account_rg }}'
          backendAzureRmStorageAccountName: '${{ parameters.storage_account_name }}'
          backendAzureRmContainerName: 'tfstate'
          backendAzureRmKey: '${{ parameters.component }}.tfstate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/components/${{ parameters.component }}'

      - task: TerraformCLI@0
        displayName: Plan - ${{ parameters.environment }} - ${{ parameters.component }}
        inputs:
          command: 'plan'
          commandOptions: '-out=${{ parameters.environment }}${{ parameters.component }}${{ parameters.build }}plan -var-file=$(System.DefaultWorkingDirectory)/environments/${{ parameters.environment }}/${{ parameters.environment }}.tfvars'
          workingDirectory: '$(System.DefaultWorkingDirectory)/components/${{ parameters.component }}'
          environmentServiceName: '${{ parameters.service_connection }}'
        env:
          tenantId : $(TenantId)
          clientId : $(ServicePrincipalId)
          secret : $(ServicePrincipalKey)

      - task: Bash@3
        condition: and(succeeded(), eq(variables.isMaster, true))
        name: "CheckFileChanges"
        displayName: "CheckFileChanges"
        env:
          files_list: '${{ parameters.files_list }}'
        inputs:
          filePath: pipeline-scripts/file-check-changes.sh

      - task: TerraformCLI@0
        displayName: Apply - ${{ parameters.environment }} - ${{ parameters.component }}
        condition: and(succeeded(), eq(variables.isMaster, true), or(eq(variables['CheckFileChanges.SOURCE_CODE_CHANGED'], 'true'),eq(${{ parameters.alwaysApply }}, 'true')))
        inputs:
          command: apply
          workingDirectory: '$(System.DefaultWorkingDirectory)/components/${{ parameters.component }}'
          environmentServiceName: '${{ parameters.service_connection }}'
          commandOptions: '${{ parameters.environment }}${{ parameters.component }}${{ parameters.build }}plan'
        env:
          tenantId : $(TenantId)
          clientId : $(ServicePrincipalId)
          secret : $(ServicePrincipalKey)

      - task: Bash@3
        displayName: "Remove local tfstate"
        inputs:
          targetType: 'inline'
          workingDirectory: '$(System.DefaultWorkingDirectory)/components/${{ parameters.component }}'
          script: |
            rm -f terraform.tfstate* && rm -rf .terraform/

      - task: AzureCLI@2
        displayName: 'Unlock TF state if required'
        condition: always()
        inputs:
          scriptType: bash
          scriptLocation: scriptPath
          azureSubscription: ${{ parameters.service_connection }}
          scriptPath: $(System.DefaultWorkingDirectory)/pipeline-scripts/unlock-tf-state.sh
          arguments: ${{ parameters.component }} ${{ parameters.storage_account_name }}
