# Docs:
# https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    include:
    - azure_pipeline-global.yaml
    - /modules/azure-landing-zone/*
    - /components/global/*
    - /environments/demo/demo.tfvars
    - /environments/dev/dev.tfvars
    - /environments/ithc/ithc.tfvars
    - /environments/prod/prod.tfvars
    - /environments/ptl/ptl.tfvars
    - /environments/sbox/sbox.tfvars
    - /environments/stg/stg.tfvars
    - /environments/test/test.tfvars

resources:
  repositories:
    - repository: cnp-azuredevops-libraries
      type: github
      ref: refs/heads/master
      name: hmcts/cnp-azuredevops-libraries
      endpoint: 'hmcts'
variables:
  - name: timeoutInMinutes
    value: 300
  - name: agentPool
    value: 'hmcts-cftptl-agent-pool'
  - name: build
    value: $(Build.BuildNumber)
  - name: product
    value: cft-platform
  - name: terraformInitSubscription
    value: 04d27a32-7a07-48b3-95b8-3c8691e1a263
  - template: vars/input-variables.yaml@cnp-azuredevops-libraries

parameters:
  - name: overrideAction
    type: string
    default: plan
    values:
      - plan
      - apply
      - destroy

  - name: environment_components
    type: object
    default:
    - deployment: 'sbox_global'
      environment: 'sbox'
      component: 'global'
      service_connection: 'dcd-cftapps-sbox'
      storage_account_rg: 'core-infra-sbox-rg'
      storage_account_name: 'cftappssbox'
      pipeline_tests: true
      dependsOn: 'Precheck'

    - deployment: 'demo_global'
      environment: 'demo'
      component: 'global'
      service_connection: 'dcd-cftapps-demo'
      storage_account_rg: 'core-infra-demo-rg'
      storage_account_name: 'cftappsdemo'
      pipeline_tests: false
      dependsOn: 'sbox_global'

    - deployment: 'dev_global'
      environment: 'dev'
      component: 'global'
      service_connection: 'dcd-cftapps-dev'
      storage_account_rg: 'core-infra-dev-rg'
      storage_account_name: 'cftappsdev'
      dependsOn: 'sbox_global'

    - deployment: 'ithc_global'
      environment: 'ithc'
      component: 'global'
      service_connection: 'dcd-cftapps-ithc'
      storage_account_rg: 'core-infra-ithc-rg'
      storage_account_name: 'cftappsithc'
      dependsOn: 'sbox_global'

    - deployment: 'perftest_global'
      environment: 'test'
      component: 'global'
      service_connection: 'dcd-cftapps-test'
      storage_account_rg: 'core-infra-test-rg'
      storage_account_name: 'cftappstest'
      dependsOn: 'sbox_global'

    - deployment: 'aat_global'
      environment: 'stg'
      component: 'global'
      service_connection: 'dcd-cftapps-stg'
      storage_account_rg: 'core-infra-stg-rg'
      storage_account_name: 'cftappsstg'
      dependsOn: 'sbox_global'

    - deployment: 'prod_global'
      environment: 'prod'
      component: 'global'
      service_connection: 'dcd-cftapps-prod'
      storage_account_rg: 'core-infra-prod-rg'
      storage_account_name: 'cftappsprod'
      dependsOn: 'sbox_global'


stages:
  - stage: Precheck
    jobs:
      - job:
        pool:  ${{ variables.agentPool }}
        timeoutInMinutes: ${{ variables.timeoutInMinutes }}
        steps:
          - template: steps/terraform-precheck.yaml@cnp-azuredevops-libraries
            parameters:
              keyvaultName: 'infra-vault-nonprod'
              keyvaultSecret: 'azure-devops-token'
              serviceConnection: 'azurerm-sandbox'

  - ${{ each deployment in parameters.environment_components }}:
      - stage: ${{ deployment.deployment }}
        dependsOn: ${{ deployment.dependsOn }}
        jobs:
          - job: TerraformPlanApply
            pool:  ${{ variables.agentPool }}
            timeoutInMinutes: ${{ variables.timeoutInMinutes }}
            steps:
              - template: steps/terraform.yaml@cnp-azuredevops-libraries
                parameters:
                  overrideAction: ${{ parameters.overrideAction }}
                  environment: ${{ deployment.environment }}
                  component: ${{ deployment.component }}
                  serviceConnection: ${{ deployment.service_connection }}
                  terraformInitSubscription: ${{ variables.terraformInitSubscription }}
                  product: ${{ variables.product }}
          - ${{ if eq(deployment.pipeline_tests, true) }}:
            - job: PipelineTests
              #pool:  ${{ variables.agentPool }}
              timeoutInMinutes: ${{ variables.timeoutInMinutes }}
              dependsOn: TerraformPlanApply
              steps:
                - task: Bash@3
                  displayName: Run pipeline tests
                  inputs:
                    targetType: 'inline'
                    script: |
                      mkdir junit
                      echo "localhost ansible_connection=local" > /tmp/hosts
                      ansible-playbook pipeline-tests.yaml -i /tmp/hosts
                    workingDirectory: '$(Pipeline.Workspace)/s/environments/${{ deployment.environment }}'
                    failOnStderr: true
                  env:
                    ANSIBLE_LOCALHOST_WARNING: false
                    ANSIBLE_CALLBACKS_ENABLED: junit
                    JUNIT_FAIL_ON_IGNORE: true
                    JUNIT_OUTPUT_DIR: '$(Pipeline.Workspace)/s/environments/${{ deployment.environment }}/junit'
                - task: PublishTestResults@2
                  displayName: Publish pipeline tests
                  condition: always()
                  inputs:
                    testResultsFormat: 'JUnit'
                    failTaskOnFailedTests: true
                    testResultsFiles: '$(Pipeline.Workspace)/s/environments/${{ deployment.environment }}/junit/pipeline-tests-*.*.xml'
                    testRunTitle: 'Platform Pipeline Tests'
