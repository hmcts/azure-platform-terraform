jobs:
  - deployment: Deploy
    pool:
      vmImage: ${{ parameters.agentPool }}
    environment: ${{ parameters.environment }}
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
            - download: current
              displayName: 'Download artifacts'
              artifact: drop
            - download: current
              displayName: 'Download tfplan'
              artifact: ${{ parameters.environment }}${{ parameters.component }}${{ parameters.build }}plan
            - task: CopyFiles@2
              inputs:
                sourceFolder: '$(Pipeline.Workspace)/${{ parameters.environment }}${{ parameters.component }}${{ parameters.build }}plan'
                targetFolder: '$(Pipeline.Workspace)/drop/components/${{ parameters.component }}'
            - task: TerraformInstaller@0
              inputs:
                terraformVersion: ${{ parameters.terraformVersion }}
            - task: TerraformCLI@0
              displayName: Init - ${{ parameters.environment }} - ${{ parameters.component }}
              inputs:
                command: 'init'
                backendType: 'azurerm'
                backendServiceArm: 'dcd-cftapps-${{ parameters.environment }}'
                backendAzureRmResourceGroupName: 'core-infra-${{ parameters.environment }}-rg'
                backendAzureRmStorageAccountName: 'cftapps${{ parameters.environment }}'
                backendAzureRmContainerName: 'tfstate'
                backendAzureRmKey: '${{ parameters.component }}/${{ parameters.environment }}.tfstate'
                workingDirectory: '$(Pipeline.Workspace)/drop/components/${{ parameters.component }}'
            - task: TerraformCLI@0
              displayName: Apply - ${{ parameters.environment }} - ${{ parameters.component }}
              inputs:
                command: 'apply'
                commandOptions: '${{ parameters.environment }}${{ parameters.component }}${{ parameters.build }}plan'
                environmentServiceName: 'dcd-cftapps-${{ parameters.environment }}'
                workingDirectory: '$(Pipeline.Workspace)/drop/components/${{ parameters.component }}'